
Shader Forge is a new node-based shader editor for Unity, giving you the freedom of shader creation in a visual and intuitive way - with no code required!

Shader Forge has been alpha-tested by a wide range of developers at companies ranging from several large studios such as Blizzard, DICE, Ubisoft, Bungie, EA, Avalanche Studios, Rovio, to indie studios such as Killbrite, InXile, The Chinese Room, and even developers like Marmoset, Samsung and Unity themselves.
A ton of feedback was provided during the testing phase, and this phase is now nearing its end, where you can jump into early-access for 20% off the full price :)

I'm super excited about this, as it's my first asset release; which I hope is the start of a longer commitment to keep this up-to-date and as good as possible!

Enjoy!

// Joachim Holm√©r



What am I buying?
-----------------
* Commercial license of Shader Forge + upcoming updates
* A large pack of example shaders to study and use freely


Workflow:
---------
* Create shaders visually, without any coding needed
* No extra files to sync over your version control system; Shader Forge uses a single file for shaders - the .shader file itself
* SF writes CG shaders that can be used in any project, without installing Shader Forge.
* Works in both Unity Pro and Unity Free
* Support center, for providing feedback, bug reports and getting help!


Some of the features:
---------------------
* Built-in Physically Based Lighting mode and energy conserving shading
* Visual and intuitive interface - Get a clear overview of what each node does
* Custom lighting nodes and IBL support, with seamless Skyshop integration coming soon!
* DX11 Tessellation & Displacement
* Transparency; both partial and alpha clipping
* Refraction & Render Textures (Requires Unity Pro)
* Plus all the essentials such as lightmapping, cubemaps, custom blending modes, depth sorting, fog control, and much much more!



Coming soon: (If Shader Forge does well, here are some features I'd love to implement!)
------------
* Built-in spherical area light support
* Skyshop-adapted IBL system/workflow to make sure you can easily work across both Skyshop and Shader Forge. (I've been in touch with the creator of Skyshop, who's interested in helping out making it happen!)
* Deferred rendering support with a clean way of making custom lighting rules apply to your rendering needs
* An advanced mode, splitting vertex and fragment programs, and splitting into multiple passes, allowing you to create very optimized and speedy shaders.
* Modular node nesting system, to bundle a set of nodes into a single node






-----------------------
DOC
---




TUTORIAL VIDS:
--------------


Shader Forge Introduction
	Moving the camera
	Placing nodes (3 ways - Sidebar, context menu or hotkeys)
	Connecting nodes
	Deleting connections (Alt + RMB)
	Placing property nodes
	Tweaking properties
	Shader settings
	Properties

Shader Forge workflow
	Creating a shader with properties
	Creating a material

Introduction to node-based shader creation
	Nodes flow right to left
	Colors 0-1, you can go out side if you want
	Math is handled per-channel

Using custom lighting
	Diffuse term
	Specular term



LEFT PANEL:
-----------
	

Shader Settings
	Path
		This is where the shader will be located in the shader selection menu
	Fallback
		This is the shader that the current shader will use, in case the current one is unsupported or too heavy to render for the user.
		Note that property names need to match in order for them to carry over.
	LOD
		This is an arbitrary measurement of how expensive the shader is, used to compare shaders with eachother
	Target renderers
		This is the platforms the shader will be compiled to. Note that some features are only available on some platforms

Properties
	Properties are the values and references you can change per-material. You can rename and reorder the properties by dragging them with their handles on the left.
	The values you give them in Shader Forge will be the default values.

Lighting
	Light Mode
		Unlit
			This is used when you want to make a fully custom lit shader, or when you don't want it to be affected by light whatsoever. Useful for mobile shaders or special effects.
		Lambert
			This is used when you don't want to use specular reflections whatsoever, it will only have the diffuse part (This light mode will most likely go away soon)
		Blinn-Phong
			This is the most common reflection mode, as it resembles specular reflections in reality quite accurately
		Phong
			This is a different way of calculating specularity
		PBL
			This is an energy conserving Physically Based Lighting mode, which is more expensive but looks a lot better than the other ones
	Double incoming light
		Checking this will multiply all incoming light by two. Unity's built-in shaders does this, so it can be useful to match their shaders.
	Remap gloss from [0-1] to [1-2048]
		This will make gloss automatically remap its values from a linear 0 to 1 range, to a more natural, exponential 1 to 2048 range
	Energy Conserving
		This will make your shaders conserve energy; meaning that gloss and specularity are connected, making the specular brighter when using more gloss, and vice versa.
		Useful for making more realistic shaders, without having to use the more expensive PBL.
	Light Count
		Enable/disable multiple lights. Some shaders might only want to ever use a single light source
	Normal Quality
		Interpolated normals are cheaper to render, but doesn't look as good as normalized normals.
	Lightmap support
		Check this is you want your shader to support lightmapping
	Mask Directional light specular by shadows
		This will remove specularity in shadows, which is more realistic. Currently only works for directional lights.
	Receive Ambient Light
		This will add the scene's ambient light to your shader, affected by the diffuse.


Quality
	Per-pixel screen coordinates
		This will make the screen coordinates more accurate, can be useful to make refraction look better


Blending & Depth
	Blend Mode
		Alpha blended	- Used for standard transparency
		Additive		- Adds color. Usually used for bright particle effects such as sparks
		Screen 			- Inversely multiplies towards 1, usually used for bright particles that you don't want to overbright
		Multiplicative	- Multiplies into the scene, can be used for dark smoke
		Custom 			- Allows you to customize the blending fully
	Face Culling
		Backface Culling 	- The standard rendering mode; will render the front side of the faces
		Frontface Culling 	- Inverse rendering mode; will render the back side of the faces
		Double Sided		- This will render both sides of each face, useful for thin materials such as leaves.
	Receive Fog
		Whether or not you want the shader to be affected by fog
	Override Fog...
		These allow you to override the fog values specified in the scene separately. Useful for special shading for distant objects, or similar.
	Auto Sort
		Check this to automatically detect sorting mode. Uncheck it to customize
	Order and offset
		This will determine in which order objects will be rendered. The offset can be used to shift the value in small increments.
	Render Type
		Defines which type of shader this is
	Depth Test
		Defines when this shader should be rendered, compared to the depth of the geometry in front of and behind it.
	Ignore Projectors
		Whether or not projectors/shadows should be able to cast onto this shader
	Write to Depth Buffer
		Whether or not this shader is solid/significant enough so that it should write its depth to the depth buffer





MAIN:
-----



The Main node is the primary node in each shader. It's where you connect all other nodes to, and is in the end used to evaluate how the shader should behave. The main node has several inputs, each controlling its own aspect of how the shader should calculate the look of the objects it renders.



SURFACE
	Diffuse
		This is the main color of your shaders. The diffuse color will receive light, have light falloff depending on the light-normal angle, and be shaded by shadows.
	Diffuse Power
		This is the exponent of the falloff of the light-normal angle. Can be used to get an extra metallic look when using values above 1. Note that this does not currently conserve energy, whenever that is enabled.
	Specular
		This is the color of the specular highlights of your shader. Higher values are brighter, black will not affect the shader at all.
	Gloss
		This is the exponent of the specular highlights. Higher values will make it look shiny, values approaching 0 will make it look matte. Note that if you have unchecked gloss remapping, you should avoid using gloss values below 1.
	Normal
		This is then tangent-space normal direction, where you can connect normal maps or custom normal vectors.
	Emission
		This is simply light that is always added to your shader, regardless of the lighting conditions. 
	Transmission
		This controls how much light is passed through when the light source is behind the surface currently being rendered. This can be useful for thin materials such as cloth or vegetation.
	Light Wrapping
		This is a way of controlling the light-normal angle falloff offset, which can be used to get an effect similar to subsurface scattering. Works best for smooth objects. Inputting a red-ish value will make the red channel "wrap around" the object more than the others, making it look as if light passed into the mesh, and came out with a red wavelength, similar to how skin is shaded.
	
LIGHTING
	Diffuse Ambient Light
		This adds light to your shader, affected by your diffuse. Can be used with, for example, cubemap using the normal direction for image-based lighting (IBL), or ambient light
	Specular Ambient Light
		This adds light to your shader, affected by your specular. Can be used with, for example, a cubemap using the view reflection direction for image-based lighting (IBL)
	Custom Lighting
		This input is active when your shader is set to unlit, allowing you to define custom lighting behaviour. The nodes you put here are per-light.

TRANSPARENCY
	Alpha
		Alpha controls the transparency of the final pixel. Note that partial transparency is generally finicky to get right, especially when using deferred rendering.
	Alpha Clip
		Alpha Clip is a way of controlling if the current pixel/fragment should draw or not. Always use alpha clip for objects that need transparency, but not partial transparency, as Alpha Clip is easily sorted, which Alpha is not.
	Refraction
		Refraction is a screen-space UV offset for refracting the background pixels. Make sure you set the alpha to something below 1 before using, so that the refraction effect is visible. 

TRANSFORMATION
	Outline Width
		This will add an outline to your shader, rendered as an offset mesh with reversed face normals. Note that hard edges will break the outline.
	Outline Color
		This controls the color of the outline.
	Vertex Offset
		This can be used to animate shaders over time, or change the shape of the object in various conditions. You simply insert a XYZ coordinate for how much each vertex should be offset.
	DX11 Displacement
		This works very much in the same way as Vertex Offset, but is used in conjuction with DX11 tessellation. (Note that DirectX is Windows only, requires a DX11 GPU and has to be enabled in Unity)
	DX11 Tessellation
		This controls how many subdivisions you want to split your triangles into. (Note that DirectX is Windows only, requires a DX11 GPU and has to be enabled in Unity)